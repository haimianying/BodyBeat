/*      fix_fft.c - Fixed-point Fast Fourier Transform  */
/*
        fix_fft()       perform FFT or inverse FFT
        window()        applies a Hanning window to the (time) input
        fix_loud()      calculates the loudness of the signal, for
                        each freq point. Result is an integer array,
                        units are dB (values will be negative).
        iscale()        scale an integer value by (numer/denom).
        fix_mpy()       perform fixed-point multiplication.
        Sinewave[1024]  sinewave normalized to 32767 (= 1.0).
        Loudampl[100]   Amplitudes for lopudnesses from 0 to -99 dB.
        Low_pass        Low-pass filter, cutoff at sample_freq / 4.


        All data are fixed-point short integers, in which
        -32768 to +32768 represent -1.0 to +1.0. Integer arithmetic
        is used for speed, instead of the more natural floating-point.

        For the forward FFT (time -> freq), fixed scaling is
        performed to prevent arithmetic overflow, and to map a 0dB
        sine/cosine wave (i.e. amplitude = 32767) to two -6dB freq
        coefficients; the one in the lower half is reported as 0dB
        by fix_loud(). The return value is always 0.

        For the inverse FFT (freq -> time), fixed scaling cannot be
        done, as two 0dB coefficients would sum to a peak amplitude of
        64K, overflowing the 32k range of the fixed-point integers.
        Thus, the fix_fft() routine performs variable scaling, and
        returns a value which is the number of bits LEFT by which
        the output must be shifted to get the actual amplitude
        (i.e. if fix_fft() returns 3, each value of fr[] and fi[]
        must be multiplied by 8 (2**3) for proper scaling.
        Clearly, this cannot be done within the fixed-point short
        integers. In practice, if the result is to be used as a
        filter, the scale_shift can usually be ignored, as the
        result will be approximately correctly normalized as is.


        TURBO C, any memory model; uses inline assembly for speed
        and for carefully-scaled arithmetic.

        Written by:  Tom Roberts  11/8/89
        Made portable:  Malcolm Slaney 12/15/94 malcolm@interval.com

                Timing on a Macintosh PowerBook 180.... (using Symantec C6.0)
                        fix_fft (1024 points)             8 ticks
                        fft (1024 points - Using SANE)  112 Ticks
                        fft (1024 points - Using FPU)    11

*/

/* FIX_MPY() - fixed-point multiplication macro.
   This macro is a statement, not an expression (uses asm).
   BEWARE: make sure _DX is not clobbered by evaluating (A) or DEST.
   args are all of type fixed.
   Scaling ensures that 32767*32767 = 32767. */
#define dosFIX_MPY(DEST,A,B)       {       \
        _DX = (B);                      \
        _AX = (A);                      \
        asm imul dx;                    \
        asm add ax,ax;                  \
        asm adc dx,dx;                  \
        DEST = _DX;             }

#define FIX_MPY(DEST,A,B)       DEST = ((int32)(A) * (int32)(B))>>15

#define N_WAVE          1024    /* dimension of Sinewave[] */
#define FFT_SIZE        1024
#define LOG2_N_WAVE     10      /* log2(N_WAVE) */
#define N_LOUD          100     /* dimension of Loudampl[] */
//#ifndef fixed
#define fixed int16
//#endif

extern fixed Sinewave[N_WAVE]; /* placed at end of this file for clarity */
extern fixed Loudampl[N_LOUD];
int db_from_ampl(fixed re, fixed im);
fixed fix_mpy(fixed a, fixed b);

/*
        fix_fft() - perform fast Fourier transform.

        if n>0 FFT is done, if n<0 inverse FFT is done
        fr[n],fi[n] are real,imaginary arrays, INPUT AND RESULT.
        size of data = 2**m
        set inverse to 0=dft, 1=idft
*/
int fix_fft(fixed fr[], fixed fi[], int m, int inverse)
{
        int mr,nn,i,j,l,k,istep, n, scale, shift;
        fixed qr,qi,tr,ti,wr,wi,t;

                n = 1<<m;

        if(n > N_WAVE)
                return -1;

        mr = 0;
        nn = n - 1;
        scale = 0;

        /* decimation in time - re-order data */
        for(m=1; m<=nn; ++m) {
                l = n;
                do {
                        l >>= 1;
                } while(mr+l > nn);
                mr = (mr & (l-1)) + l;

                if(mr <= m) continue;
                tr = fr[m];
                fr[m] = fr[mr];
                fr[mr] = tr;
                ti = fi[m];
                fi[m] = fi[mr];
                fi[mr] = ti;
        }

        l = 1;
        k = LOG2_N_WAVE-1;
        while(l < n) {
                if(inverse) {
                        /* variable scaling, depending upon data */
                        shift = 0;
                        for(i=0; i<n; ++i) {
                                j = fr[i];
                                if(j < 0)
                                        j = -j;
                                m = fi[i];
                                if(m < 0)
                                        m = -m;
                                if(j > 16383 || m > 16383) {
                                        shift = 1;
                                        break;
                                }
                        }
                        if(shift)
                                ++scale;
                } else {
                        /* fixed scaling, for proper normalization -
                           there will be log2(n) passes, so this
                           results in an overall factor of 1/n,
                           distributed to maximize arithmetic accuracy. */
                        shift = 1;
                }
                /* it may not be obvious, but the shift will be performed
                   on each data point exactly once, during this pass. */
                istep = l << 1;
                for(m=0; m<l; ++m) {
                        j = m << k;
                        /* 0 <= j < N_WAVE/2 */
                        wr =  Sinewave[j+N_WAVE/4];
                        wi = -Sinewave[j];
                        if(inverse)
                                wi = -wi;
                        if(shift) {
                                wr >>= 1;
                                wi >>= 1;
                        }
                        for(i=m; i<n; i+=istep) {
                                j = i + l;
                                        tr = fix_mpy(wr,fr[j]) - fix_mpy(wi,fi[j]);
                                        ti = fix_mpy(wr,fi[j]) + fix_mpy(wi,fr[j]);
                                qr = fr[i];
                                qi = fi[i];
                                if(shift) {
                                        qr >>= 1;
                                        qi >>= 1;
                                }
                                fr[j] = qr - tr;
                                fi[j] = qi - ti;
                                fr[i] = qr + tr;
                                fi[i] = qi + ti;
                        }
                }
                --k;
                l = istep;
        }

        return scale;
}


/*      window() - apply a Hanning window       */
void window(fixed fr[], int n)
{
        int i,j,k;

        j = N_WAVE/n;
        n >>= 1;
        for(i=0,k=N_WAVE/4; i<n; ++i,k+=j)
                FIX_MPY(fr[i],fr[i],16384-(Sinewave[k]>>1));
        n <<= 1;
        for(k-=j; i<n; ++i,k-=j)
                FIX_MPY(fr[i],fr[i],16384-(Sinewave[k]>>1));
}

#define N_WAVE_Hamming  2048
const int16  Hamming[N_WAVE_Hamming] __FLASH__ = {

  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +329,  +329,  +329,  +329,  +330,
  +330,  +330,  +330,  +331,  +331,  +332,  +332,  +332,  +333,  +333,  +334,  +334,  +335,  +335,  +336,  +336,
  +337,  +337,  +338,  +338,  +339,  +340,  +340,  +341,  +342,  +342,  +343,  +344,  +345,  +346,  +346,  +347,
  +348,  +349,  +350,  +351,  +352,  +352,  +353,  +354,  +355,  +356,  +357,  +358,  +359,  +361,  +362,  +363,
  +364,  +365,  +366,  +367,  +368,  +370,  +371,  +372,  +373,  +375,  +376,  +377,  +379,  +380,  +381,  +383,
  +384,  +386,  +387,  +388,  +390,  +391,  +393,  +394,  +396,  +397,  +399,  +401,  +402,  +404,  +405,  +407,
  +409,  +410,  +412,  +414,  +416,  +417,  +419,  +421,  +423,  +425,  +426,  +428,  +430,  +432,  +434,  +436,
  +438,  +440,  +442,  +444,  +446,  +448,  +450,  +452,  +454,  +456,  +458,  +460,  +462,  +465,  +467,  +469,
  +471,  +473,  +476,  +478,  +480,  +482,  +485,  +487,  +489,  +492,  +494,  +496,  +499,  +501,  +504,  +506,
  +509,  +511,  +514,  +516,  +519,  +521,  +524,  +526,  +529,  +532,  +534,  +537,  +539,  +542,  +545,  +548,
  +550,  +553,  +556,  +558,  +561,  +564,  +567,  +570,  +573,  +575,  +578,  +581,  +584,  +587,  +590,  +593,
  +596,  +599,  +602,  +605,  +608,  +611,  +614,  +617,  +620,  +623,  +626,  +629,  +633,  +636,  +639,  +642,
  +645,  +649,  +652,  +655,  +658,  +662,  +665,  +668,  +672,  +675,  +678,  +682,  +685,  +688,  +692,  +695,
  +699,  +702,  +706,  +709,  +713,  +716,  +720,  +723,  +727,  +730,  +734,  +737,  +741,  +745,  +748,  +752,
  +756,  +759,  +763,  +767,  +770,  +774,  +778,  +782,  +785,  +789,  +793,  +797,  +801,  +804,  +808,  +812,
  +816,  +820,  +824,  +828,  +832,  +836,  +840,  +844,  +848,  +852,  +856,  +860,  +864,  +868,  +872,  +876,
  +880,  +884,  +888,  +892,  +896,  +900,  +905,  +909,  +913,  +917,  +921,  +926,  +930,  +934,  +938,  +943,
  +947,  +951,  +955,  +960,  +964,  +968,  +973,  +977,  +982,  +986,  +990,  +995,  +999, +1004, +1008, +1012,
 +1017, +1021, +1026, +1030, +1035, +1039, +1044, +1048, +1053, +1058, +1062, +1067, +1071, +1076, +1081, +1085,
 +1090, +1095, +1099, +1104, +1109, +1113, +1118, +1123, +1127, +1132, +1137, +1142, +1146, +1151, +1156, +1161,
 +1166, +1170, +1175, +1180, +1185, +1190, +1195, +1199, +1204, +1209, +1214, +1219, +1224, +1229, +1234, +1239,
 +1244, +1249, +1254, +1259, +1264, +1269, +1274, +1279, +1284, +1289, +1294, +1299, +1304, +1309, +1314, +1319,
 +1324, +1329, +1334, +1340, +1345, +1350, +1355, +1360, +1365, +1370, +1376, +1381, +1386, +1391, +1396, +1402,
 +1407, +1412, +1417, +1423, +1428, +1433, +1438, +1444, +1449, +1454, +1460, +1465, +1470, +1475, +1481, +1486,
 +1491, +1497, +1502, +1508, +1513, +1518, +1524, +1529, +1534, +1540, +1545, +1551, +1556, +1561, +1567, +1572,
 +1578, +1583, +1589, +1594, +1600, +1605, +1611, +1616, +1622, +1627, +1633, +1638, +1644, +1649, +1655, +1660,
 +1666, +1671, +1677, +1682, +1688, +1693, +1699, +1704, +1710, +1716, +1721, +1727, +1732, +1738, +1744, +1749,
 +1755, +1760, +1766, +1772, +1777, +1783, +1789, +1794, +1800, +1805, +1811, +1817, +1822, +1828, +1834, +1839,
 +1845, +1851, +1856, +1862, +1868, +1873, +1879, +1885, +1891, +1896, +1902, +1908, +1913, +1919, +1925, +1930,
 +1936, +1942, +1948, +1953, +1959, +1965, +1971, +1976, +1982, +1988, +1994, +1999, +2005, +2011, +2017, +2022,
 +2028, +2034, +2040, +2045, +2051, +2057, +2063, +2068, +2074, +2080, +2086, +2091, +2097, +2103, +2109, +2114,
 +2120, +2126, +2132, +2138, +2143, +2149, +2155, +2161, +2166, +2172, +2178, +2184, +2190, +2195, +2201, +2207,
 +2213, +2219, +2224, +2230, +2236, +2242, +2247, +2253, +2259, +2265, +2271, +2276, +2282, +2288, +2294, +2299,
 +2305, +2311, +2317, +2323, +2328, +2334, +2340, +2346, +2351, +2357, +2363, +2369, +2374, +2380, +2386, +2392,
 +2397, +2403, +2409, +2415, +2420, +2426, +2432, +2438, +2443, +2449, +2455, +2461, +2466, +2472, +2478, +2484,
 +2489, +2495, +2501, +2506, +2512, +2518, +2524, +2529, +2535, +2541, +2546, +2552, +2558, +2563, +2569, +2575,
 +2580, +2586, +2592, +2597, +2603, +2609, +2614, +2620, +2626, +2631, +2637, +2643, +2648, +2654, +2659, +2665,
 +2671, +2676, +2682, +2687, +2693, +2699, +2704, +2710, +2715, +2721, +2726, +2732, +2738, +2743, +2749, +2754,
 +2760, +2765, +2771, +2776, +2782, +2787, +2793, +2798, +2804, +2809, +2815, +2820, +2826, +2831, +2837, +2842,
 +2848, +2853, +2858, +2864, +2869, +2875, +2880, +2886, +2891, +2896, +2902, +2907, +2912, +2918, +2923, +2928,
 +2934, +2939, +2944, +2950, +2955, +2960, +2966, +2971, +2976, +2982, +2987, +2992, +2997, +3003, +3008, +3013,
 +3018, +3024, +3029, +3034, +3039, +3044, +3050, +3055, +3060, +3065, +3070, +3075, +3080, +3086, +3091, +3096,
 +3101, +3106, +3111, +3116, +3121, +3126, +3131, +3136, +3141, +3146, +3151, +3156, +3161, +3166, +3171, +3176,
 +3181, +3186, +3191, +3196, +3201, +3206, +3211, +3216, +3221, +3226, +3230, +3235, +3240, +3245, +3250, +3255,
 +3259, +3264, +3269, +3274, +3279, +3283, +3288, +3293, +3298, +3302, +3307, +3312, +3316, +3321, +3326, +3330,
 +3335, +3340, +3344, +3349, +3354, +3358, +3363, +3367, +3372, +3376, +3381, +3385, +3390, +3394, +3399, +3403,
 +3408, +3412, +3417, +3421, +3426, +3430, +3435, +3439, +3443, +3448, +3452, +3456, +3461, +3465, +3469, +3474,
 +3478, +3482, +3486, +3491, +3495, +3499, +3503, +3508, +3512, +3516, +3520, +3524, +3528, +3533, +3537, +3541,
 +3545, +3549, +3553, +3557, +3561, +3565, +3569, +3573, +3577, +3581, +3585, +3589, +3593, +3597, +3601, +3605,
 +3609, +3612, +3616, +3620, +3624, +3628, +3632, +3635, +3639, +3643, +3647, +3650, +3654, +3658, +3661, +3665,
 +3669, +3673, +3676, +3680, +3683, +3687, +3691, +3694, +3698, +3701, +3705, +3708, +3712, +3715, +3719, +3722,
 +3726, +3729, +3733, +3736, +3739, +3743, +3746, +3749, +3753, +3756, +3759, +3763, +3766, +3769, +3772, +3776,
 +3779, +3782, +3785, +3788, +3792, +3795, +3798, +3801, +3804, +3807, +3810, +3813, +3816, +3819, +3822, +3825,
 +3828, +3831, +3834, +3837, +3840, +3843, +3846, +3849, +3851, +3854, +3857, +3860, +3863, +3865, +3868, +3871,
 +3874, +3876, +3879, +3882, +3884, +3887, +3890, +3892, +3895, +3898, +3900, +3903, +3905, +3908, +3910, +3913,
 +3915, +3918, +3920, +3923, +3925, +3927, +3930, +3932, +3934, +3937, +3939, +3941, +3944, +3946, +3948, +3950,
 +3953, +3955, +3957, +3959, +3961, +3963, +3966, +3968, +3970, +3972, +3974, +3976, +3978, +3980, +3982, +3984,
 +3986, +3988, +3990, +3991, +3993, +3995, +3997, +3999, +4001, +4003, +4004, +4006, +4008, +4010, +4011, +4013,
 +4015, +4016, +4018, +4020, +4021, +4023, +4024, +4026, +4027, +4029, +4031, +4032, +4033, +4035, +4036, +4038,
 +4039, +4041, +4042, +4043, +4045, +4046, +4047, +4049, +4050, +4051, +4052, +4054, +4055, +4056, +4057, +4058,
 +4059, +4060, +4062, +4063, +4064, +4065, +4066, +4067, +4068, +4069, +4070, +4071, +4072, +4072, +4073, +4074,
 +4075, +4076, +4077, +4077, +4078, +4079, +4080, +4080, +4081, +4082, +4083, +4083, +4084, +4084, +4085, +4086,
 +4086, +4087, +4087, +4088, +4088, +4089, +4089, +4090, +4090, +4091, +4091, +4091, +4092, +4092, +4092, +4093,
 +4093, +4093, +4093, +4094, +4094, +4094, +4094, +4094, +4095, +4095, +4095, +4095, +4095, +4095, +4095, +4095,
 +4095, +4095, +4095, +4095, +4095, +4095, +4095, +4095, +4094, +4094, +4094, +4094, +4094, +4093, +4093, +4093,
 +4093, +4092, +4092, +4092, +4091, +4091, +4091, +4090, +4090, +4089, +4089, +4088, +4088, +4087, +4087, +4086,
 +4086, +4085, +4084, +4084, +4083, +4083, +4082, +4081, +4080, +4080, +4079, +4078, +4077, +4077, +4076, +4075,
 +4074, +4073, +4072, +4072, +4071, +4070, +4069, +4068, +4067, +4066, +4065, +4064, +4063, +4062, +4060, +4059,
 +4058, +4057, +4056, +4055, +4054, +4052, +4051, +4050, +4049, +4047, +4046, +4045, +4043, +4042, +4041, +4039,
 +4038, +4036, +4035, +4033, +4032, +4031, +4029, +4027, +4026, +4024, +4023, +4021, +4020, +4018, +4016, +4015,
 +4013, +4011, +4010, +4008, +4006, +4004, +4003, +4001, +3999, +3997, +3995, +3993, +3991, +3990, +3988, +3986,
 +3984, +3982, +3980, +3978, +3976, +3974, +3972, +3970, +3968, +3966, +3963, +3961, +3959, +3957, +3955, +3953,
 +3950, +3948, +3946, +3944, +3941, +3939, +3937, +3934, +3932, +3930, +3927, +3925, +3923, +3920, +3918, +3915,
 +3913, +3910, +3908, +3905, +3903, +3900, +3898, +3895, +3892, +3890, +3887, +3884, +3882, +3879, +3876, +3874,
 +3871, +3868, +3865, +3863, +3860, +3857, +3854, +3851, +3849, +3846, +3843, +3840, +3837, +3834, +3831, +3828,
 +3825, +3822, +3819, +3816, +3813, +3810, +3807, +3804, +3801, +3798, +3795, +3792, +3788, +3785, +3782, +3779,
 +3776, +3772, +3769, +3766, +3763, +3759, +3756, +3753, +3749, +3746, +3743, +3739, +3736, +3733, +3729, +3726,
 +3722, +3719, +3715, +3712, +3708, +3705, +3701, +3698, +3694, +3691, +3687, +3683, +3680, +3676, +3673, +3669,
 +3665, +3661, +3658, +3654, +3650, +3647, +3643, +3639, +3635, +3632, +3628, +3624, +3620, +3616, +3612, +3609,
 +3605, +3601, +3597, +3593, +3589, +3585, +3581, +3577, +3573, +3569, +3565, +3561, +3557, +3553, +3549, +3545,
 +3541, +3537, +3533, +3528, +3524, +3520, +3516, +3512, +3508, +3503, +3499, +3495, +3491, +3486, +3482, +3478,
 +3474, +3469, +3465, +3461, +3456, +3452, +3448, +3443, +3439, +3435, +3430, +3426, +3421, +3417, +3412, +3408,
 +3403, +3399, +3394, +3390, +3385, +3381, +3376, +3372, +3367, +3363, +3358, +3354, +3349, +3344, +3340, +3335,
 +3330, +3326, +3321, +3316, +3312, +3307, +3302, +3298, +3293, +3288, +3283, +3279, +3274, +3269, +3264, +3259,
 +3255, +3250, +3245, +3240, +3235, +3230, +3226, +3221, +3216, +3211, +3206, +3201, +3196, +3191, +3186, +3181,
 +3176, +3171, +3166, +3161, +3156, +3151, +3146, +3141, +3136, +3131, +3126, +3121, +3116, +3111, +3106, +3101,
 +3096, +3091, +3086, +3080, +3075, +3070, +3065, +3060, +3055, +3050, +3044, +3039, +3034, +3029, +3024, +3018,
 +3013, +3008, +3003, +2997, +2992, +2987, +2982, +2976, +2971, +2966, +2960, +2955, +2950, +2944, +2939, +2934,
 +2928, +2923, +2918, +2912, +2907, +2902, +2896, +2891, +2886, +2880, +2875, +2869, +2864, +2858, +2853, +2848,
 +2842, +2837, +2831, +2826, +2820, +2815, +2809, +2804, +2798, +2793, +2787, +2782, +2776, +2771, +2765, +2760,
 +2754, +2749, +2743, +2738, +2732, +2726, +2721, +2715, +2710, +2704, +2699, +2693, +2687, +2682, +2676, +2671,
 +2665, +2659, +2654, +2648, +2643, +2637, +2631, +2626, +2620, +2614, +2609, +2603, +2597, +2592, +2586, +2580,
 +2575, +2569, +2563, +2558, +2552, +2546, +2541, +2535, +2529, +2524, +2518, +2512, +2506, +2501, +2495, +2489,
 +2484, +2478, +2472, +2466, +2461, +2455, +2449, +2443, +2438, +2432, +2426, +2420, +2415, +2409, +2403, +2397,
 +2392, +2386, +2380, +2374, +2369, +2363, +2357, +2351, +2346, +2340, +2334, +2328, +2323, +2317, +2311, +2305,
 +2299, +2294, +2288, +2282, +2276, +2271, +2265, +2259, +2253, +2247, +2242, +2236, +2230, +2224, +2219, +2213,
 +2207, +2201, +2195, +2190, +2184, +2178, +2172, +2166, +2161, +2155, +2149, +2143, +2138, +2132, +2126, +2120,
 +2114, +2109, +2103, +2097, +2091, +2086, +2080, +2074, +2068, +2063, +2057, +2051, +2045, +2040, +2034, +2028,
 +2022, +2017, +2011, +2005, +1999, +1994, +1988, +1982, +1976, +1971, +1965, +1959, +1953, +1948, +1942, +1936,
 +1930, +1925, +1919, +1913, +1908, +1902, +1896, +1891, +1885, +1879, +1873, +1868, +1862, +1856, +1851, +1845,
 +1839, +1834, +1828, +1822, +1817, +1811, +1805, +1800, +1794, +1789, +1783, +1777, +1772, +1766, +1760, +1755,
 +1749, +1744, +1738, +1732, +1727, +1721, +1716, +1710, +1704, +1699, +1693, +1688, +1682, +1677, +1671, +1666,
 +1660, +1655, +1649, +1644, +1638, +1633, +1627, +1622, +1616, +1611, +1605, +1600, +1594, +1589, +1583, +1578,
 +1572, +1567, +1561, +1556, +1551, +1545, +1540, +1534, +1529, +1524, +1518, +1513, +1508, +1502, +1497, +1491,
 +1486, +1481, +1475, +1470, +1465, +1460, +1454, +1449, +1444, +1438, +1433, +1428, +1423, +1417, +1412, +1407,
 +1402, +1396, +1391, +1386, +1381, +1376, +1370, +1365, +1360, +1355, +1350, +1345, +1340, +1334, +1329, +1324,
 +1319, +1314, +1309, +1304, +1299, +1294, +1289, +1284, +1279, +1274, +1269, +1264, +1259, +1254, +1249, +1244,
 +1239, +1234, +1229, +1224, +1219, +1214, +1209, +1204, +1199, +1195, +1190, +1185, +1180, +1175, +1170, +1166,
 +1161, +1156, +1151, +1146, +1142, +1137, +1132, +1127, +1123, +1118, +1113, +1109, +1104, +1099, +1095, +1090,
 +1085, +1081, +1076, +1071, +1067, +1062, +1058, +1053, +1048, +1044, +1039, +1035, +1030, +1026, +1021, +1017,
 +1012, +1008, +1004,  +999,  +995,  +990,  +986,  +982,  +977,  +973,  +968,  +964,  +960,  +955,  +951,  +947,
  +943,  +938,  +934,  +930,  +926,  +921,  +917,  +913,  +909,  +905,  +900,  +896,  +892,  +888,  +884,  +880,
  +876,  +872,  +868,  +864,  +860,  +856,  +852,  +848,  +844,  +840,  +836,  +832,  +828,  +824,  +820,  +816,
  +812,  +808,  +804,  +801,  +797,  +793,  +789,  +785,  +782,  +778,  +774,  +770,  +767,  +763,  +759,  +756,
  +752,  +748,  +745,  +741,  +737,  +734,  +730,  +727,  +723,  +720,  +716,  +713,  +709,  +706,  +702,  +699,
  +695,  +692,  +688,  +685,  +682,  +678,  +675,  +672,  +668,  +665,  +662,  +658,  +655,  +652,  +649,  +645,
  +642,  +639,  +636,  +633,  +629,  +626,  +623,  +620,  +617,  +614,  +611,  +608,  +605,  +602,  +599,  +596,
  +593,  +590,  +587,  +584,  +581,  +578,  +575,  +573,  +570,  +567,  +564,  +561,  +558,  +556,  +553,  +550,
  +548,  +545,  +542,  +539,  +537,  +534,  +532,  +529,  +526,  +524,  +521,  +519,  +516,  +514,  +511,  +509,
  +506,  +504,  +501,  +499,  +496,  +494,  +492,  +489,  +487,  +485,  +482,  +480,  +478,  +476,  +473,  +471,
  +469,  +467,  +465,  +462,  +460,  +458,  +456,  +454,  +452,  +450,  +448,  +446,  +444,  +442,  +440,  +438,
  +436,  +434,  +432,  +430,  +428,  +426,  +425,  +423,  +421,  +419,  +417,  +416,  +414,  +412,  +410,  +409,
  +407,  +405,  +404,  +402,  +401,  +399,  +397,  +396,  +394,  +393,  +391,  +390,  +388,  +387,  +386,  +384,
  +383,  +381,  +380,  +379,  +377,  +376,  +375,  +373,  +372,  +371,  +370,  +368,  +367,  +366,  +365,  +364,
  +363,  +362,  +361,  +359,  +358,  +357,  +356,  +355,  +354,  +353,  +352,  +352,  +351,  +350,  +349,  +348,
  +347,  +346,  +346,  +345,  +344,  +343,  +342,  +342,  +341,  +340,  +340,  +339,  +338,  +338,  +337,  +337,
  +336,  +336,  +335,  +335,  +334,  +334,  +333,  +333,  +332,  +332,  +332,  +331,  +331,  +330,  +330,  +330,
  +330,  +329,  +329,  +329,  +329,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328,  +328
};

//Try this for the last time before moving ahead
void window(fixed fr[])
{
        for ( uint32 i = 0, k = (N_WAVE_Hamming / FFT_SIZE); i < FFT_SIZE; i++ ) 
      {  
        fr[i] = FIX_MPY(fr[i], fr[i], Hamming[i * k]); // Windowing
      } 
}
           


/*      fix_loud() - compute loudness of freq-spectrum components.
        n should be ntot/2, where ntot was passed to fix_fft();
        6 dB is added to account for the omitted alias components.
        scale_shift should be the result of fix_fft(), if the time-series
        was obtained from an inverse FFT, 0 otherwise.
        loud[] is the loudness, in dB wrt 32767; will be +10 to -N_LOUD.
*/
void fix_loud(fixed loud[], fixed fr[], fixed fi[], int n, int scale_shift)
{
        int i, max;

        max = 0;
        if(scale_shift > 0)
                max = 10;
        scale_shift = (scale_shift+1) * 6;

        for(i=0; i<n; ++i) {
                loud[i] = db_from_ampl(fr[i],fi[i]) + scale_shift;
                if(loud[i] > max)
                        loud[i] = max;
        }
}

/*      db_from_ampl() - find loudness (in dB) from
        the complex amplitude.
*/
int db_from_ampl(fixed re, fixed im)
{
        static long loud2[N_LOUD] = {0};
        long v;
        int i;

        if(loud2[0] == 0) {
                loud2[0] = (long)Loudampl[0] * (long)Loudampl[0];
                for(i=1; i<N_LOUD; ++i) {
                        v = (long)Loudampl[i] * (long)Loudampl[i];
                        loud2[i] = v;
                        loud2[i-1] = (loud2[i-1]+v) / 2;
                }
        }

        v = (long)re * (long)re + (long)im * (long)im;

        for(i=0; i<N_LOUD; ++i)
                if(loud2[i] <= v)
                        break;

        return (-i);
}

/*
        fix_mpy() - fixed-point multiplication
*/
fixed fix_mpy(fixed a, fixed b)
{
        FIX_MPY(a,a,b);
        return a;
}

/*
        iscale() - scale an integer value by (numer/denom)
*/
int iscale(int value, int numer, int denom)
{
#ifdef  DOS
        asm     mov ax,value
        asm     imul WORD PTR numer
        asm     idiv WORD PTR denom

        return _AX;
#else
                return (long) value * (long)numer/(long)denom;
#endif
}

/*
        fix_dot() - dot product of two fixed arrays
*/
fixed fix_dot(fixed *hpa, fixed *pb, int n)
{
        fixed *pa;
        long sum;
        register fixed a,b;
        unsigned int seg,off;

/*      seg = FP_SEG(hpa);
        off = FP_OFF(hpa);
        seg += off>>4;
        off &= 0x000F;
        pa = MK_FP(seg,off);
 */
        sum = 0L;
        while(n--) {
                a = *pa++;
                b = *pb++;
                FIX_MPY(a,a,b);
                sum += a;
        }

        if(sum > 0x7FFF)
                sum = 0x7FFF;
        else if(sum < -0x7FFF)
                sum = -0x7FFF;

        return (fixed)sum;
#ifdef  DOS
        /* ASSUMES hpa is already normalized so FP_OFF(hpa) < 16 */
        asm     push    ds
        asm     lds     si,hpa
        asm     les     di,pb
        asm     xor     bx,bx

        asm     xor     cx,cx

loop:   /* intermediate values can overflow by a factor of 2 without
           causing an error; the final value must not overflow! */
        asm     lodsw
.
        asm     imul    word ptr es:[di]
        asm     add     bx,ax
        asm     adc     cx,dx
        asm     jo      overflow
        asm     add     di,2
        asm     dec     word ptr n
        asm     jg      loop

        asm     add     bx,bx
        asm     adc     cx,cx
        asm     jo      overflow

        asm     pop     ds
        return _CX;

overflow:
        asm     mov     cx,7FFFH
        asm     adc     cx,0

        asm     pop     ds
        return _CX;
#endif

}


#if N_WAVE != 1024
        ERROR: N_WAVE != 1024
#endif
fixed Sinewave[1024] = {
      0,    201,    402,    603,    804,   1005,   1206,   1406,
   1607,   1808,   2009,   2209,   2410,   2610,   2811,   3011,
   3211,   3411,   3611,   3811,   4011,   4210,   4409,   4608,
   4807,   5006,   5205,   5403,   5601,   5799,   5997,   6195,
   6392,   6589,   6786,   6982,   7179,   7375,   7571,   7766,
   7961,   8156,   8351,   8545,   8739,   8932,   9126,   9319,
   9511,   9703,   9895,  10087,  10278,  10469,  10659,  10849,
  11038,  11227,  11416,  11604,  11792,  11980,  12166,  12353,
  12539,  12724,  12909,  13094,  13278,  13462,  13645,  13827,
  14009,  14191,  14372,  14552,  14732,  14911,  15090,  15268,
  15446,  15623,  15799,  15975,  16150,  16325,  16499,  16672,
  16845,  17017,  17189,  17360,  17530,  17699,  17868,  18036,
  18204,  18371,  18537,  18702,  18867,  19031,  19194,  19357,
  19519,  19680,  19840,  20000,  20159,  20317,  20474,  20631,
  20787,  20942,  21096,  21249,  21402,  21554,  21705,  21855,
  22004,  22153,  22301,  22448,  22594,  22739,  22883,  23027,
  23169,  23311,  23452,  23592,  23731,  23869,  24006,  24143,
  24278,  24413,  24546,  24679,  24811,  24942,  25072,  25201,
  25329,  25456,  25582,  25707,  25831,  25954,  26077,  26198,
  26318,  26437,  26556,  26673,  26789,  26905,  27019,  27132,
  27244,  27355,  27466,  27575,  27683,  27790,  27896,  28001,
  28105,  28208,  28309,  28410,  28510,  28608,  28706,  28802,
  28897,  28992,  29085,  29177,  29268,  29358,  29446,  29534,
  29621,  29706,  29790,  29873,  29955,  30036,  30116,  30195,
  30272,  30349,  30424,  30498,  30571,  30643,  30713,  30783,
  30851,  30918,  30984,  31049,  31113,  31175,  31236,  31297,
  31356,  31413,  31470,  31525,  31580,  31633,  31684,  31735,
  31785,  31833,  31880,  31926,  31970,  32014,  32056,  32097,
  32137,  32176,  32213,  32249,  32284,  32318,  32350,  32382,
  32412,  32441,  32468,  32495,  32520,  32544,  32567,  32588,
  32609,  32628,  32646,  32662,  32678,  32692,  32705,  32717,
  32727,  32736,  32744,  32751,  32757,  32761,  32764,  32766,
  32767,  32766,  32764,  32761,  32757,  32751,  32744,  32736,
  32727,  32717,  32705,  32692,  32678,  32662,  32646,  32628,
  32609,  32588,  32567,  32544,  32520,  32495,  32468,  32441,
  32412,  32382,  32350,  32318,  32284,  32249,  32213,  32176,
  32137,  32097,  32056,  32014,  31970,  31926,  31880,  31833,
  31785,  31735,  31684,  31633,  31580,  31525,  31470,  31413,
  31356,  31297,  31236,  31175,  31113,  31049,  30984,  30918,
  30851,  30783,  30713,  30643,  30571,  30498,  30424,  30349,
  30272,  30195,  30116,  30036,  29955,  29873,  29790,  29706,
  29621,  29534,  29446,  29358,  29268,  29177,  29085,  28992,
  28897,  28802,  28706,  28608,  28510,  28410,  28309,  28208,
  28105,  28001,  27896,  27790,  27683,  27575,  27466,  27355,
  27244,  27132,  27019,  26905,  26789,  26673,  26556,  26437,
  26318,  26198,  26077,  25954,  25831,  25707,  25582,  25456,
  25329,  25201,  25072,  24942,  24811,  24679,  24546,  24413,
  24278,  24143,  24006,  23869,  23731,  23592,  23452,  23311,
  23169,  23027,  22883,  22739,  22594,  22448,  22301,  22153,
  22004,  21855,  21705,  21554,  21402,  21249,  21096,  20942,
  20787,  20631,  20474,  20317,  20159,  20000,  19840,  19680,
  19519,  19357,  19194,  19031,  18867,  18702,  18537,  18371,
  18204,  18036,  17868,  17699,  17530,  17360,  17189,  17017,
  16845,  16672,  16499,  16325,  16150,  15975,  15799,  15623,
  15446,  15268,  15090,  14911,  14732,  14552,  14372,  14191,
  14009,  13827,  13645,  13462,  13278,  13094,  12909,  12724,
  12539,  12353,  12166,  11980,  11792,  11604,  11416,  11227,
  11038,  10849,  10659,  10469,  10278,  10087,   9895,   9703,
   9511,   9319,   9126,   8932,   8739,   8545,   8351,   8156,
   7961,   7766,   7571,   7375,   7179,   6982,   6786,   6589,
   6392,   6195,   5997,   5799,   5601,   5403,   5205,   5006,
   4807,   4608,   4409,   4210,   4011,   3811,   3611,   3411,
   3211,   3011,   2811,   2610,   2410,   2209,   2009,   1808,
   1607,   1406,   1206,   1005,    804,    603,    402,    201,
      0,   -201,   -402,   -603,   -804,  -1005,  -1206,  -1406,
  -1607,  -1808,  -2009,  -2209,  -2410,  -2610,  -2811,  -3011,
  -3211,  -3411,  -3611,  -3811,  -4011,  -4210,  -4409,  -4608,
  -4807,  -5006,  -5205,  -5403,  -5601,  -5799,  -5997,  -6195,
  -6392,  -6589,  -6786,  -6982,  -7179,  -7375,  -7571,  -7766,
  -7961,  -8156,  -8351,  -8545,  -8739,  -8932,  -9126,  -9319,
  -9511,  -9703,  -9895, -10087, -10278, -10469, -10659, -10849,
 -11038, -11227, -11416, -11604, -11792, -11980, -12166, -12353,
 -12539, -12724, -12909, -13094, -13278, -13462, -13645, -13827,
 -14009, -14191, -14372, -14552, -14732, -14911, -15090, -15268,
 -15446, -15623, -15799, -15975, -16150, -16325, -16499, -16672,
 -16845, -17017, -17189, -17360, -17530, -17699, -17868, -18036,
 -18204, -18371, -18537, -18702, -18867, -19031, -19194, -19357,
 -19519, -19680, -19840, -20000, -20159, -20317, -20474, -20631,
 -20787, -20942, -21096, -21249, -21402, -21554, -21705, -21855,
 -22004, -22153, -22301, -22448, -22594, -22739, -22883, -23027,
 -23169, -23311, -23452, -23592, -23731, -23869, -24006, -24143,
 -24278, -24413, -24546, -24679, -24811, -24942, -25072, -25201,
 -25329, -25456, -25582, -25707, -25831, -25954, -26077, -26198,
 -26318, -26437, -26556, -26673, -26789, -26905, -27019, -27132,
 -27244, -27355, -27466, -27575, -27683, -27790, -27896, -28001,
 -28105, -28208, -28309, -28410, -28510, -28608, -28706, -28802,
 -28897, -28992, -29085, -29177, -29268, -29358, -29446, -29534,
 -29621, -29706, -29790, -29873, -29955, -30036, -30116, -30195,
 -30272, -30349, -30424, -30498, -30571, -30643, -30713, -30783,
 -30851, -30918, -30984, -31049, -31113, -31175, -31236, -31297,
 -31356, -31413, -31470, -31525, -31580, -31633, -31684, -31735,
 -31785, -31833, -31880, -31926, -31970, -32014, -32056, -32097,
 -32137, -32176, -32213, -32249, -32284, -32318, -32350, -32382,
 -32412, -32441, -32468, -32495, -32520, -32544, -32567, -32588,
 -32609, -32628, -32646, -32662, -32678, -32692, -32705, -32717,
 -32727, -32736, -32744, -32751, -32757, -32761, -32764, -32766,
 -32767, -32766, -32764, -32761, -32757, -32751, -32744, -32736,
 -32727, -32717, -32705, -32692, -32678, -32662, -32646, -32628,
 -32609, -32588, -32567, -32544, -32520, -32495, -32468, -32441,
 -32412, -32382, -32350, -32318, -32284, -32249, -32213, -32176,
 -32137, -32097, -32056, -32014, -31970, -31926, -31880, -31833,
 -31785, -31735, -31684, -31633, -31580, -31525, -31470, -31413,
 -31356, -31297, -31236, -31175, -31113, -31049, -30984, -30918,
 -30851, -30783, -30713, -30643, -30571, -30498, -30424, -30349,
 -30272, -30195, -30116, -30036, -29955, -29873, -29790, -29706,
 -29621, -29534, -29446, -29358, -29268, -29177, -29085, -28992,
 -28897, -28802, -28706, -28608, -28510, -28410, -28309, -28208,
 -28105, -28001, -27896, -27790, -27683, -27575, -27466, -27355,
 -27244, -27132, -27019, -26905, -26789, -26673, -26556, -26437,
 -26318, -26198, -26077, -25954, -25831, -25707, -25582, -25456,
 -25329, -25201, -25072, -24942, -24811, -24679, -24546, -24413,
 -24278, -24143, -24006, -23869, -23731, -23592, -23452, -23311,
 -23169, -23027, -22883, -22739, -22594, -22448, -22301, -22153,
 -22004, -21855, -21705, -21554, -21402, -21249, -21096, -20942,
 -20787, -20631, -20474, -20317, -20159, -20000, -19840, -19680,
 -19519, -19357, -19194, -19031, -18867, -18702, -18537, -18371,
 -18204, -18036, -17868, -17699, -17530, -17360, -17189, -17017,
 -16845, -16672, -16499, -16325, -16150, -15975, -15799, -15623,
 -15446, -15268, -15090, -14911, -14732, -14552, -14372, -14191,
 -14009, -13827, -13645, -13462, -13278, -13094, -12909, -12724,
 -12539, -12353, -12166, -11980, -11792, -11604, -11416, -11227,
 -11038, -10849, -10659, -10469, -10278, -10087,  -9895,  -9703,
  -9511,  -9319,  -9126,  -8932,  -8739,  -8545,  -8351,  -8156,
  -7961,  -7766,  -7571,  -7375,  -7179,  -6982,  -6786,  -6589,
  -6392,  -6195,  -5997,  -5799,  -5601,  -5403,  -5205,  -5006,
  -4807,  -4608,  -4409,  -4210,  -4011,  -3811,  -3611,  -3411,
  -3211,  -3011,  -2811,  -2610,  -2410,  -2209,  -2009,  -1808,
  -1607,  -1406,  -1206,  -1005,   -804,   -603,   -402,   -201,
};

#if N_LOUD != 100
        ERROR: N_LOUD != 100
#endif
fixed Loudampl[100] = {
  32767,  29203,  26027,  23197,  20674,  18426,  16422,  14636,
  13044,  11626,  10361,   9234,   8230,   7335,   6537,   5826,
   5193,   4628,   4125,   3676,   3276,   2920,   2602,   2319,
   2067,   1842,   1642,   1463,   1304,   1162,   1036,    923,
    823,    733,    653,    582,    519,    462,    412,    367,
    327,    292,    260,    231,    206,    184,    164,    146,
    130,    116,    103,     92,     82,     73,     65,     58,
     51,     46,     41,     36,     32,     29,     26,     23,
     20,     18,     16,     14,     13,     11,     10,      9,
      8,      7,      6,      5,      5,      4,      4,      3,
      3,      2,      2,      2,      2,      1,      1,      1,
      1,      1,      1,      0,      0,      0,      0,      0,
      0,      0,      0,      0,
};


/*
Towards Implementing BodyAcoustics in Maple 
For the Maple r5 (STM32F103RBT6), this is 20kbytes.  each audio data
sample is 16bits, or 2bytes, so at most you can get a 10k
memory in SRAM.
*/


// setup codec parameters
// must be done before #includes
// see readme file in libraries folder for explanations
#define SAMPLE_RATE 8 // 8Khz
#define ADCS 0 // no ADCs are being used

// include necessary libraries
#include <AudioCodec_Maple.h>
//#include <stdlib.h>
//#include      "dma.h"
#include   "string.h"

// create data variables for audio transfer
// note the use of "int16" rather than int -> on the maple,
// an int is 32bits
int16 left_in = 0x0000;
int16 left_out = 0x0000;
int16 right_in = 0x0000;
int16 right_out = 0x0000;

// create a delay buffer in memory
#define BufferSize 2048 // buffer Size is limited by microcontroller SRAM BufferSize
#define FrameSize 1024 // frame Size
int16 cirBuffer[BufferSize]; // (BufferSize x 2) bytes of SRAM
volatile uint16 location = 0; // buffer location to read/write from
                     // note use of "uint16", "unsigned int16" doesnt work
#define BTConnStatusPin 16
volatile char isFrameReady=0;//Flag telling frame is ready 
volatile uint16 frameOffset=0;// account for the start location of current frame in cirBuffer

/*
 **************************  RADIX-4 on 32 bits STM32F103VB  *************************
 * LINK:  http://coolarduino.wordpress.com
 * Created for Olimexino board: Anatoly Kuzmenko 5 November 2012 
 *                                 k_anatoly@hotmail.com
 * SOFTWARE COMPILES USING MAPLE-IDE 0.0.12  (Tested on Linux OS only).
 * Copyright (C) 2012 Anatoly Kuzmenko.
 * All Rights Reserved.
 ********************************************************************************************
 */

#define    SMP_RATE           8                      // Sampling Rate in kHz

             fixed            f_r[FFT_SIZE];
             fixed            f_i[FFT_SIZE];
             int32            f_mag[FFT_SIZE/2];
             //fixed            loud[FFT_SIZE/2];

const       uint32            digitalPin1 =   6;     //process time
const       uint32            digitalPin2 =   7;     //fft time
const        int32            dc_offset  = 0;
volatile    uint32            process    =    0;

//Rifat added this to compute magnitude spectrum
static inline void computeMagSpec( int16 *fr_, int16 *fi_, int32 *f_mag)  __attribute__((always_inline));
static inline void computeMagSpec( int16 *fr_, int16 *fi_, int32 *f_mag)
{
  for (int i = 0; i < FFT_SIZE/2; i += 1)
        {
          f_mag[i] = (fr_[i] * fr_[i]) + (fi_[i]*fi_[i]);
        }
}

//**************************This part is for running the fft algo on the data from the audio codec********************************//
#define windowSize 40//all the frames in a 5 second window, which is 5/.125 = 40 frames
int32 subband_1[windowSize];//These variables should be the same type as loud
int32 subband_7[windowSize];
int32 subband_4[windowSize];
fixed frame_counter = 0;

void sortArray(int32 nums[], int total) {
  int x;
  int y;
  for(x=0; x<total; x++) {
      for(y=0; y<total-1; y++) {
          if(nums[y]>nums[y+1]) {
              int32 temp = nums[y+1];
              nums[y+1] = nums[y];
              nums[y] = temp;
          }
      }
  }
}

int32 data[windowSize];//initialize another array data

int32 median(int32 d[], int size) {
    int32 med;
    //int32 *data = malloc(sizeof(int32)*size);//initialize another array data
    memcpy(data, d, sizeof(int32)*size);//copy d into data
    sortArray(data, size);//sort data
    // Use data to find median
    if(size%2==0) {
        med = (data[size/2]+data[size/2-1])/2;
    }else{
        med = data[size/2];
    }
    //free(data);
    return med;
}

int32 intqrtlrange(int32 d[], int size) {
    int32 range;
    int upperIndex = 3*size/4;
    int lowerIndex = size/4;
    //int32 *data = malloc(sizeof(int32)*size);//initialize another array data
    memcpy(data, d, sizeof(int32)*size);//copy d into data
    sortArray(data, size);//sort data
    // Use data to find inter quartile range
    range = data[upperIndex] - data[lowerIndex];
    //free(data);
    return range;
}

#define Threshold_Subband_1_iqr 123.4
#define Threshold_Subband_7_median 45.67
#define Threshold_Subband_4_median 78

int frameAdmissionControl(){
  
  for(int i = 0; i < 4; i+=1){
    subband_1[frame_counter] = subband_1[frame_counter] + f_mag[i];
  }
  
  for(int i = 16; i < 32; i+=1){
    subband_4[frame_counter] = subband_4[frame_counter] + f_mag[i];
  }
  
  for(int i = 128; i < 256; i+=1){
    subband_7[frame_counter] = subband_7[frame_counter] + f_mag[i];
  }
  
  frame_counter = frame_counter + 1;
  if(frame_counter == windowSize){
    frame_counter = 0;
  }
  
  //compute window Level Features
  //int32 med_subband_4 = ;
  //int32 med_subband_7 = ;
  //int32 iqr_subband_1 = ;
  
  //filter windows based on this information
  if (intqrtlrange(subband_1, windowSize) > Threshold_Subband_1_iqr){
    if(median(subband_7, windowSize) > Threshold_Subband_7_median){
      if(median(subband_4, windowSize) > Threshold_Subband_4_median){
        return 1;//1 means send the current frame to the android side, it most probably contains important body sounds
      }else{
        return 1;
      }
    }else{
      return 1;
    }
  }else{
    return 1;
  }
  
}


void setup() {
  
  //********Initializing Bluetooth Module************//
  Serial3.begin(115200);
  
  //*********Initializing FFT***********************//
  pinMode(digitalPin1,       OUTPUT);
  pinMode(digitalPin2,       OUTPUT);
  
  //*********Initializing AudioCodec****************//
  SerialUSB.end(); // usb conflicts with the codec in this mode
                   // a different operating mode which allows both
                   // is in the works
  AudioCodec_init(); // setup codec registers
  // call this last if setting up other parts
}
int didi=0;
void loop() {
  while (1){ // reduces clock jitter
    if(isFrameReady==1){
//      if(isBTConnected()==1){
//        Serial2.print("Yes");
//        //Serial2.write(cirBuffer+frameOffset, BufferSize);//as BufferSize=2*FrameSize bytes
//        //delay(1000); // This delay is required.
//      
//      }
      
      
      digitalWrite( digitalPin1, HIGH);
      /*
      for ( uint32 i = 0, k = (NWAVE / FFT_SIZE); i < FFT_SIZE; i++ ) 
      {  
        f_r[i] = mult_shf_s16x16((f_r[i] - dc_offset), Hamming[i * k]); // Windowing
      }
      */
      
      memset( f_i, 0, sizeof(f_i));                   // Image -zero.
      
      //rev_bin( f_r, FFT_SIZE);
      
      digitalWrite( digitalPin2, HIGH);
      
      fix_fft( f_r, f_i, LOG2_N_WAVE, 0);
      //fix_loud(loud, f_r, f_i, 512, 0);
      computeMagSpec( f_r, f_i, f_mag);               // Rifat added this part to store the magnitude spectrum
      
      
      
      if(frameAdmissionControl()==1){
        char testVal[]={255, 255, 255, 255};
        Serial3.write(testVal,4);
        Serial3.write(f_mag,2*FFT_SIZE/2+2);//2*FFT_SIZE/2+2);//513 data points
      }
      
      
      //char endOfFrame = 100;
      //Serial3.write(testVal,10);
      //Serial3.write(testVal,4);
      //Serial3.write(Sinewave,2*FFT_SIZE/2+2);//513 data points
      //didi=didi+1;
      //if(didi>512){
      //  didi=0;
      //}
      //Serial3.write(&endOfFrame,1);
      
            
      digitalWrite( digitalPin1, LOW);                
      digitalWrite( digitalPin2, LOW);                // All above = 4.76 millisec.
      
      isFrameReady=0;
      
    }
  }
}


// timer4->ch1 interrupt routine - all data processed here
// you must call this function "AudioCodec_interrupt"
void AudioCodec_interrupt() {

  // &'s are necessary on data_in variables
  AudioCodec_data(&left_in, &right_in, left_out, right_out);
  
  // put new data in same location for maximal delay time
  cirBuffer[location++] = left_in; // post increment location to go to next memory location
  
  // check if location has gotten bigger than buffer BufferSize
  if (location == BufferSize) {
    isFrameReady=1;// This shows that one frame of data is already stored
    memcpy(&f_r[FrameSize], &cirBuffer[FrameSize], FrameSize);
    location = 0; // reset location
  }
  if (location == FrameSize){
    isFrameReady=1;// This shows that one frame of data is already stored
    memcpy(&f_r[0], &cirBuffer, FrameSize);
  }
  
  // dont use reti() with on maple
}



////***************This part is for testing the quality of the fft algorithm********************//
//void setup() {
//  
//}
//
//void loop() {
//  delay(5000);
//  //f_r={997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309,383,454,522,588,649,707,760,809,853,891,924,951,972,988,997,1000,997,988,972,951,924,891,853,809,760,707,649,588,522,454,383,309,233,156,78,0,-78,-156,-233,-309,-383,-454,-522,-588,-649,-707,-760,-809,-853,-891,-924,-951,-972,-988,-997,-1000,-997,-988,-972,-951,-924,-891,-853,-809,-760,-707,-649,-588,-522,-454,-383,-309,-233,-156,-78,0,78,156,233,309};
//  //f_r={29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271,11481,13620,15675,17634,19483,21213,22812,24271,25579,26730,27716,28532,29171,29631,29908,30000,29908,29631,29171,28532,27716,26730,25579,24271,22812,21213,19483,17634,15675,13620,11481,9271,7003,4693,2354,0,-2354,-4693,-7003,-9271,-11481,-13620,-15675,-17634,-19483,-21213,-22812,-24271,-25579,-26730,-27716,-28532,-29171,-29631,-29908,-30000,-29908,-29631,-29171,-28532,-27716,-26730,-25579,-24271,-22812,-21213,-19483,-17634,-15675,-13620,-11481,-9271,-7003,-4693,-2354,0,2354,4693,7003,9271};
//  f_r={-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000,-21213,0,21213,-30000,21213,0,-21213,30000};
//  memset( f_i, 0, sizeof(f_i));  // Image -zero.
//  
//  //window(f_r);// the new one
//  
//  fix_fft( f_r, f_i, LOG2_N_WAVE, 0);
//  
//  fix_loud(loud, f_r, f_i, 512, 0);
//  
//  //computeMagSpec( f_r, f_i, f_mag);               // Rifat added this part to store the magnitude spectrum
//  cmd_print_help();
//  prnt_out(loud ,FFT_SIZE/2);
//  
//  while(1);
//}
//
///***********************************************************************************************************/        
//
//
//void prnt_out( int16 *array ,int arraysize) 
//{
//  SerialUSB.print("\n\t");      
//     for ( uint32 i = 0; i < arraysize; i++)
//     {  
//       SerialUSB.print(array[i]);       
//       SerialUSB.print(", ");    
//       //if ((i+1)%16 == 0) SerialUSB.print("\n\t");
//     }
//  SerialUSB.println("\n\t");
//}
//
//void cmd_print_help(void) 
//{
//    SerialUSB.println("\n  Freq spectrum : \n");
//}
